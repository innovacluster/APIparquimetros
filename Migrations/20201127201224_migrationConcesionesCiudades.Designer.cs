// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebApiParquimetros.Contexts;

namespace WebApiParquimetros.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20201127201224_migrationConcesionesCiudades")]
    partial class migrationConcesionesCiudades
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WebApiParquimetros.Models.Agentes", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<bool>("bit_status");

                    b.Property<string>("created_by")
                        .HasMaxLength(250);

                    b.Property<DateTime>("created_date");

                    b.Property<int>("intidconcesion_id");

                    b.Property<int>("intidzona_id");

                    b.Property<string>("last_modified_by")
                        .HasMaxLength(250);

                    b.Property<DateTime>("last_modified_date");

                    b.Property<string>("str_nombre")
                        .HasMaxLength(250);

                    b.HasKey("id");

                    b.HasIndex("intidzona_id");

                    b.ToTable("tbagentes");
                });

            modelBuilder.Entity("WebApiParquimetros.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<bool>("bit_status");

                    b.Property<string>("created_by");

                    b.Property<DateTime>("created_date");

                    b.Property<double>("dbl_saldo_actual");

                    b.Property<double>("dbl_saldo_anterior");

                    b.Property<int>("intIdTipoUsuario");

                    b.Property<int?>("intidciudad");

                    b.Property<int?>("intidconcesion_id");

                    b.Property<int?>("intidzona");

                    b.Property<string>("last_modified_by");

                    b.Property<DateTime>("last_modified_date");

                    b.Property<string>("strApellidos");

                    b.Property<string>("strNombre");

                    b.Property<string>("str_cp");

                    b.Property<string>("str_direccion");

                    b.Property<string>("str_razon_social");

                    b.Property<string>("str_rfc");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.HasIndex("intIdTipoUsuario");

                    b.HasIndex("intidciudad");

                    b.HasIndex("intidconcesion_id");

                    b.HasIndex("intidzona");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("WebApiParquimetros.Models.CatCiudades", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<string>("str_ciudad");

                    b.HasKey("id");

                    b.ToTable("tbcatciudades");
                });

            modelBuilder.Entity("WebApiParquimetros.Models.CatalogoOpciones", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<bool>("bit_status");

                    b.Property<string>("str_opcion");

                    b.HasKey("id");

                    b.ToTable("tbcatopciones");
                });

            modelBuilder.Entity("WebApiParquimetros.Models.Ciudades", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<bool>("bit_status");

                    b.Property<string>("created_by")
                        .HasMaxLength(250);

                    b.Property<DateTime>("created_date");

                    b.Property<int?>("int_id_ciudad");

                    b.Property<string>("last_modified_by")
                        .HasMaxLength(250);

                    b.Property<DateTime>("last_modified_date");

                    b.Property<string>("str_ciudad")
                        .HasMaxLength(200);

                    b.Property<string>("str_desc_ciudad");

                    b.Property<string>("str_latitud")
                        .HasMaxLength(50);

                    b.Property<string>("str_longitud")
                        .HasMaxLength(50);

                    b.HasKey("id");

                    b.HasIndex("int_id_ciudad");

                    b.ToTable("tbciudades");
                });

            modelBuilder.Entity("WebApiParquimetros.Models.Comerciantes", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<bool>("bit_status");

                    b.Property<string>("created_by")
                        .HasMaxLength(250);

                    b.Property<DateTime>("created_date");

                    b.Property<int>("intidconcesion_id");

                    b.Property<string>("last_modified_by")
                        .HasMaxLength(250);

                    b.Property<DateTime>("last_modified_date");

                    b.Property<string>("str_apellido_ap")
                        .HasMaxLength(50);

                    b.Property<string>("str_apellido_mat")
                        .HasMaxLength(250);

                    b.Property<string>("str_comerciante")
                        .HasMaxLength(50);

                    b.Property<string>("str_nombre")
                        .HasMaxLength(50);

                    b.Property<string>("str_telefono")
                        .HasMaxLength(50);

                    b.HasKey("id");

                    b.HasIndex("intidconcesion_id");

                    b.ToTable("tbcomerciantes");
                });

            modelBuilder.Entity("WebApiParquimetros.Models.Comisiones", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<bool>("bit_status");

                    b.Property<string>("created_by")
                        .HasMaxLength(250);

                    b.Property<DateTime>("created_date");

                    b.Property<double>("dcm_porcentaje");

                    b.Property<double>("dcm_valor_fijo");

                    b.Property<int>("intidconcesion_id");

                    b.Property<string>("last_modified_by")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("last_modified_date");

                    b.Property<string>("str_tipo");

                    b.HasKey("id");

                    b.HasIndex("intidconcesion_id");

                    b.ToTable("tbcomisiones");
                });

            modelBuilder.Entity("WebApiParquimetros.Models.Concesiones", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<bool>("bit_status");

                    b.Property<double>("dbl_costo_licencia");

                    b.Property<DateTime>("dtm_fecha_activacion_licencia");

                    b.Property<DateTime>("dtm_fecha_ingreso");

                    b.Property<int>("int_licencias");

                    b.Property<int>("intidciudad");

                    b.Property<int>("intidciudad_cat");

                    b.Property<string>("str_ciudad");

                    b.Property<string>("str_clave")
                        .HasMaxLength(100);

                    b.Property<string>("str_domicilio");

                    b.Property<string>("str_email");

                    b.Property<string>("str_latitud");

                    b.Property<string>("str_longitud");

                    b.Property<string>("str_nombre_cliente");

                    b.Property<string>("str_notas");

                    b.Property<string>("str_poligono");

                    b.Property<string>("str_razon_social");

                    b.Property<string>("str_rfc");

                    b.Property<string>("str_telefono")
                        .HasMaxLength(15);

                    b.Property<string>("str_tipo");

                    b.HasKey("id");

                    b.ToTable("tbconcesiones");
                });

            modelBuilder.Entity("WebApiParquimetros.Models.ConcesionesOpciones", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<int?>("int_id_concesion");

                    b.Property<int?>("int_id_opcion");

                    b.HasKey("id");

                    b.HasIndex("int_id_concesion");

                    b.HasIndex("int_id_opcion");

                    b.ToTable("tbpcionesconcesion");
                });

            modelBuilder.Entity("WebApiParquimetros.Models.DetalleMovimientos", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<DateTime>("dtm_horaFin");

                    b.Property<DateTime>("dtm_horaInicio");

                    b.Property<double>("flt_descuentos");

                    b.Property<double>("flt_importe");

                    b.Property<double>("flt_monto_porcentaje");

                    b.Property<double>("flt_porcentaje_comision");

                    b.Property<double>("flt_saldo_anterior");

                    b.Property<double>("flt_saldo_fin");

                    b.Property<double>("flt_total_con_comision");

                    b.Property<int>("int_duracion");

                    b.Property<string>("int_id_usuario_id");

                    b.Property<int?>("int_id_zona");

                    b.Property<int?>("int_idespacio");

                    b.Property<int>("int_idmovimiento");

                    b.Property<string>("str_latitud");

                    b.Property<string>("str_longitud");

                    b.Property<string>("str_observaciones");

                    b.HasKey("id");

                    b.HasIndex("int_id_usuario_id");

                    b.HasIndex("int_id_zona");

                    b.HasIndex("int_idespacio");

                    b.HasIndex("int_idmovimiento");

                    b.ToTable("tbdetallemovimientos");
                });

            modelBuilder.Entity("WebApiParquimetros.Models.DetalleMulta", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<bool>("bit_status");

                    b.Property<DateTime>("dtmFecha");

                    b.Property<double>("flt_monto");

                    b.Property<int>("int_id_multa");

                    b.Property<string>("str_comentarios");

                    b.Property<string>("str_usuario");

                    b.HasKey("id");

                    b.ToTable("tbdetallemulta");
                });

            modelBuilder.Entity("WebApiParquimetros.Models.DetalleSaldo", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<DateTime>("dtm_fecha");

                    b.Property<double>("flt_monto");

                    b.Property<int>("int_id_saldo");

                    b.Property<string>("int_id_usuario");

                    b.Property<string>("str_forma_pago");

                    b.Property<string>("str_tipo");

                    b.HasKey("id");

                    b.HasIndex("int_id_saldo");

                    b.HasIndex("int_id_usuario");

                    b.ToTable("tbdetallesaldo");
                });

            modelBuilder.Entity("WebApiParquimetros.Models.Espacios", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<bool>("bit_ocupado");

                    b.Property<bool>("bit_status");

                    b.Property<int>("id_zona");

                    b.Property<string>("str_clave");

                    b.Property<string>("str_color");

                    b.Property<string>("str_latitud");

                    b.Property<string>("str_longitud");

                    b.Property<string>("str_marcador");

                    b.HasKey("id");

                    b.HasIndex("id_zona");

                    b.ToTable("tbespacios");
                });

            modelBuilder.Entity("WebApiParquimetros.Models.Lugares", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<bool>("bit_status");

                    b.Property<string>("created_by")
                        .HasMaxLength(225);

                    b.Property<DateTime>("created_date");

                    b.Property<int>("int_id_zona_id");

                    b.Property<int>("intidconcesion_id");

                    b.Property<string>("last_modified_by")
                        .HasMaxLength(225);

                    b.Property<DateTime>("last_modified_date");

                    b.Property<string>("str_latitud")
                        .HasMaxLength(50);

                    b.Property<string>("str_longitud")
                        .HasMaxLength(50);

                    b.Property<string>("str_lugar")
                        .HasMaxLength(50);

                    b.HasKey("id");

                    b.HasIndex("int_id_zona_id");

                    b.HasIndex("intidconcesion_id");

                    b.ToTable("tblugares");
                });

            modelBuilder.Entity("WebApiParquimetros.Models.Movimientos", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<double>("BalanceBefore");

                    b.Property<DateTime>("CardExpirationDate");

                    b.Property<string>("CardReference");

                    b.Property<string>("CardScheme");

                    b.Property<double>("CuspmrPagateliaNewBalance");

                    b.Property<string>("CuspmrType");

                    b.Property<double>("DiscountAmountCurrencyId");

                    b.Property<double>("DiscountBalanceBefore");

                    b.Property<double>("DiscountBalanceCurrencyId");

                    b.Property<int>("ExternalId1");

                    b.Property<int>("ExternalId2");

                    b.Property<int>("ExternalId3");

                    b.Property<double>("FixedFee");

                    b.Property<string>("InsDescription");

                    b.Property<string>("InsShortdesc");

                    b.Property<string>("MaskedCardNumber");

                    b.Property<double>("PartialFixedFee");

                    b.Property<double>("PartialPercFee");

                    b.Property<double>("PartialVat1");

                    b.Property<double>("PercFee");

                    b.Property<double>("PercFeeTopped");

                    b.Property<double>("PercVat1");

                    b.Property<double>("PercVat2");

                    b.Property<bool>("PermitAutoRenew");

                    b.Property<bool>("PermitExpiration");

                    b.Property<string>("Plate10");

                    b.Property<string>("Plate2");

                    b.Property<string>("Plate3");

                    b.Property<string>("Plate4");

                    b.Property<string>("Plate5");

                    b.Property<string>("Plate6");

                    b.Property<string>("Plate7");

                    b.Property<string>("Plate8");

                    b.Property<string>("Plate9");

                    b.Property<double>("RefundAmount");

                    b.Property<string>("Sector");

                    b.Property<int>("ServiceChargeTypeId");

                    b.Property<double>("ShopkeeperAmount");

                    b.Property<bool>("ShopkeeperOp");

                    b.Property<double>("ShopkeeperProfit");

                    b.Property<string>("Tariff");

                    b.Property<int>("TicketNumber");

                    b.Property<double>("TotalAmount");

                    b.Property<bool>("TransStatus");

                    b.Property<bool>("bit_status");

                    b.Property<double>("bonificacion");

                    b.Property<bool>("boolean_auto_recarga");

                    b.Property<bool>("boolean_multa");

                    b.Property<string>("created_by")
                        .HasMaxLength(225);

                    b.Property<DateTime?>("created_date");

                    b.Property<DateTime>("dt_hora_inicio");

                    b.Property<DateTime?>("dtm_fecha_descuento");

                    b.Property<DateTime?>("dtm_fecha_insercion_descuento");

                    b.Property<DateTime>("dtm_hora_fin");

                    b.Property<double>("flt_moneda_saldo_previo_descuento");

                    b.Property<double>("flt_monto");

                    b.Property<double>("flt_monto_devolucion");

                    b.Property<double>("flt_monto_inicial");

                    b.Property<double>("flt_monto_porc_devolucion");

                    b.Property<double>("flt_monto_porcentaje");

                    b.Property<double>("flt_monto_real");

                    b.Property<double>("flt_porcentaje_comision");

                    b.Property<double>("flt_saldo_anterior");

                    b.Property<double?>("flt_saldo_previo_descuento");

                    b.Property<double>("flt_total_con_comision");

                    b.Property<double>("flt_total_dev_con_comision");

                    b.Property<double?>("flt_valor_descuento");

                    b.Property<double?>("flt_valor_devuelto");

                    b.Property<double?>("flt_valor_final_descuento");

                    b.Property<int?>("int_id_espacio");

                    b.Property<int?>("int_id_multa");

                    b.Property<int?>("int_id_saldo_id");

                    b.Property<string>("int_id_usuario_id");

                    b.Property<int>("int_id_vehiculo_id");

                    b.Property<int>("int_tiempo");

                    b.Property<int>("int_tiempo_comprado");

                    b.Property<int>("int_tiempo_devuelto");

                    b.Property<int>("intidconcesion_id");

                    b.Property<string>("last_modified_by")
                        .HasMaxLength(225);

                    b.Property<DateTime>("last_modified_date");

                    b.Property<string>("str_cambio_descuento")
                        .HasMaxLength(50);

                    b.Property<string>("str_codigo_autorizacion")
                        .HasMaxLength(50);

                    b.Property<string>("str_codigo_transaccion")
                        .HasMaxLength(50);

                    b.Property<string>("str_comentarios")
                        .HasMaxLength(200);

                    b.Property<string>("str_hash_tarjeta")
                        .HasMaxLength(50);

                    b.Property<string>("str_instalacion")
                        .HasMaxLength(50);

                    b.Property<string>("str_instalacion_abrv")
                        .HasMaxLength(50);

                    b.Property<string>("str_latitud");

                    b.Property<string>("str_longitud");

                    b.Property<string>("str_moneda_valor_descuento")
                        .HasMaxLength(50);

                    b.Property<string>("str_nombre_concesion");

                    b.Property<string>("str_placa");

                    b.Property<string>("str_referencia_operacion")
                        .HasMaxLength(50);

                    b.Property<string>("str_so")
                        .HasMaxLength(50);

                    b.Property<string>("str_tipo")
                        .HasMaxLength(50);

                    b.Property<string>("str_versionapp")
                        .HasMaxLength(50);

                    b.Property<string>("tipo_vehiculo");

                    b.Property<double>("valor_sin_bonificar");

                    b.HasKey("id");

                    b.HasIndex("int_id_espacio");

                    b.HasIndex("int_id_saldo_id");

                    b.HasIndex("int_id_vehiculo_id");

                    b.HasIndex("intidconcesion_id");

                    b.ToTable("tbmovimientos");
                });

            modelBuilder.Entity("WebApiParquimetros.Models.Multas", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<bool>("bit_status");

                    b.Property<string>("created_by")
                        .HasMaxLength(225);

                    b.Property<DateTime>("created_date");

                    b.Property<DateTime>("dtm_fecha");

                    b.Property<DateTime>("dtm_fecha_multafisica");

                    b.Property<double>("flt_monto");

                    b.Property<int?>("int_id_movimiento_id");

                    b.Property<int?>("int_id_vehiculo_id");

                    b.Property<int?>("intidconcesion_id");

                    b.Property<string>("last_modified_by")
                        .HasMaxLength(225);

                    b.Property<DateTime>("last_modified_date");

                    b.Property<string>("str_Estado");

                    b.Property<string>("str_articulo");

                    b.Property<string>("str_categoria");

                    b.Property<string>("str_clave");

                    b.Property<string>("str_clave_candado");

                    b.Property<string>("str_color");

                    b.Property<string>("str_documento_garantia");

                    b.Property<string>("str_folio_multa");

                    b.Property<string>("str_fundamento");

                    b.Property<string>("str_id_agente_id");

                    b.Property<string>("str_marca");

                    b.Property<string>("str_modelo");

                    b.Property<string>("str_motivo")
                        .HasMaxLength(200);

                    b.Property<string>("str_no_parquimetro");

                    b.Property<string>("str_placa");

                    b.Property<string>("str_tipo_multa");

                    b.Property<string>("str_tipo_pago");

                    b.Property<string>("str_ubicacion");

                    b.HasKey("id");

                    b.HasIndex("int_id_movimiento_id");

                    b.HasIndex("int_id_vehiculo_id");

                    b.HasIndex("intidconcesion_id");

                    b.HasIndex("str_id_agente_id");

                    b.ToTable("tbmultas");
                });

            modelBuilder.Entity("WebApiParquimetros.Models.Opciones", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<bool>("bit_status");

                    b.Property<string>("str_opcion")
                        .HasMaxLength(50);

                    b.HasKey("id");

                    b.ToTable("tbopciones");
                });

            modelBuilder.Entity("WebApiParquimetros.Models.Parametros", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<double>("PorcentajeComisionRecarga");

                    b.Property<bool>("bolUsarNomenclaturaCajones");

                    b.Property<double>("flt_Tarifa_minima");

                    b.Property<double>("flt_intervalo_tarifa");

                    b.Property<int>("intTimepoAviso");

                    b.Property<int>("int_intervalo_estacionamiento");

                    b.Property<int>("int_maximo_estacionamiento");

                    b.Property<int>("int_minimo_estacionamiento");

                    b.Property<int?>("intidconcesion_id");

                    b.Property<string>("str_descrip_us_admin");

                    b.HasKey("id");

                    b.HasIndex("intidconcesion_id");

                    b.ToTable("tbparametros");
                });

            modelBuilder.Entity("WebApiParquimetros.Models.Permisos", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<int>("id_opcion");

                    b.Property<int>("id_rol");

                    b.HasKey("id");

                    b.HasIndex("id_opcion");

                    b.HasIndex("id_rol");

                    b.ToTable("tbpermisos");
                });

            modelBuilder.Entity("WebApiParquimetros.Models.ResumenDiario", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<double>("dec_andriod");

                    b.Property<double>("dec_ant_andriod");

                    b.Property<double>("dec_ant_ios");

                    b.Property<double>("dec_ios");

                    b.Property<double>("dec_por_andriod");

                    b.Property<double>("dec_por_ant_total");

                    b.Property<double>("dec_por_ios");

                    b.Property<double>("dec_total");

                    b.Property<double>("dec_total_ant");

                    b.Property<DateTime>("dtm_dia_anterior");

                    b.Property<DateTime>("dtm_fecha");

                    b.Property<int>("int_andriod");

                    b.Property<int>("int_anio");

                    b.Property<int>("int_ant_andriod");

                    b.Property<int>("int_ant_ios");

                    b.Property<int>("int_autos_andriod");

                    b.Property<int>("int_autos_ant_andriod");

                    b.Property<int>("int_autos_ant_ios");

                    b.Property<int>("int_autos_ios");

                    b.Property<int>("int_autos_por_andriod");

                    b.Property<int>("int_autos_por_ios");

                    b.Property<int>("int_dia");

                    b.Property<int>("int_id_consecion");

                    b.Property<int>("int_ios");

                    b.Property<int>("int_mes");

                    b.Property<int>("int_por_andriod");

                    b.Property<int>("int_por_ant_total");

                    b.Property<int>("int_por_ios");

                    b.Property<int>("int_total");

                    b.Property<int>("int_total_ant");

                    b.Property<int>("int_total_autos");

                    b.Property<string>("str_dia_sem_ant");

                    b.Property<string>("str_dia_semama");

                    b.HasKey("id");

                    b.HasIndex("int_id_consecion");

                    b.ToTable("tbresumendiario");
                });

            modelBuilder.Entity("WebApiParquimetros.Models.ResumenMensual", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<double>("dec_mes_andriod");

                    b.Property<double>("dec_mes_ant_andriod");

                    b.Property<double>("dec_mes_ant_ios");

                    b.Property<double>("dec_mes_ios");

                    b.Property<double>("dec_mes_por_andriod");

                    b.Property<double>("dec_mes_por_ios");

                    b.Property<double>("dec_mes_por_total");

                    b.Property<double>("dec_mes_total");

                    b.Property<double>("dec_mes_total_ant");

                    b.Property<DateTime>("dtm_fecha_fin");

                    b.Property<DateTime>("dtm_fecha_inicio");

                    b.Property<DateTime>("dtm_mes_anterior");

                    b.Property<int>("int_anio");

                    b.Property<int>("int_id_consecion");

                    b.Property<int>("int_mes_andriod");

                    b.Property<int>("int_mes_ant_andriod");

                    b.Property<int>("int_mes_ant_ios");

                    b.Property<int>("int_mes_autos_andriod");

                    b.Property<int>("int_mes_autos_ant_andriod");

                    b.Property<int>("int_mes_autos_ant_ios");

                    b.Property<int>("int_mes_autos_ios");

                    b.Property<int>("int_mes_autos_por_andriod");

                    b.Property<int>("int_mes_autos_por_ios");

                    b.Property<int>("int_mes_ios");

                    b.Property<int>("int_mes_por_andriod");

                    b.Property<int>("int_mes_por_ios");

                    b.Property<int>("int_mes_por_total");

                    b.Property<int>("int_mes_total");

                    b.Property<int>("int_mes_total_ant");

                    b.Property<int>("int_mes_total_autos");

                    b.Property<string>("str_mes");

                    b.HasKey("id");

                    b.HasIndex("int_id_consecion");

                    b.ToTable("tbresumenmensual");
                });

            modelBuilder.Entity("WebApiParquimetros.Models.ResumenSemanal", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<double>("dec_sem_andriod");

                    b.Property<double>("dec_sem_ant_andriod");

                    b.Property<double>("dec_sem_ant_ios");

                    b.Property<double>("dec_sem_ios");

                    b.Property<double>("dec_sem_por_andriod");

                    b.Property<double>("dec_sem_por_ios");

                    b.Property<double>("dec_sem_por_total");

                    b.Property<double>("dec_sem_total");

                    b.Property<double>("dec_sem_total_ant");

                    b.Property<DateTime>("dtm_fecha_fin");

                    b.Property<DateTime>("dtm_fecha_inicio");

                    b.Property<int>("int_anio");

                    b.Property<int>("int_id_consecion");

                    b.Property<int>("int_sem_andriod");

                    b.Property<int>("int_sem_ant_andriod");

                    b.Property<int>("int_sem_ant_ios");

                    b.Property<int>("int_sem_autos_andriod");

                    b.Property<int>("int_sem_autos_ant_andriod");

                    b.Property<int>("int_sem_autos_ant_ios");

                    b.Property<int>("int_sem_autos_ios");

                    b.Property<int>("int_sem_autos_por_andriod");

                    b.Property<int>("int_sem_autos_por_ios");

                    b.Property<int>("int_sem_ios");

                    b.Property<int>("int_sem_por_andriod");

                    b.Property<int>("int_sem_por_ant");

                    b.Property<int>("int_sem_por_ios");

                    b.Property<int>("int_sem_total");

                    b.Property<int>("int_sem_total_ant");

                    b.Property<int>("int_sem_total_autos");

                    b.Property<int>("int_semana");

                    b.Property<int>("int_semana_ant");

                    b.HasKey("id");

                    b.HasIndex("int_id_consecion");

                    b.ToTable("tbresumensemanal");
                });

            modelBuilder.Entity("WebApiParquimetros.Models.Saldos", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<bool>("bit_status");

                    b.Property<string>("created_by")
                        .HasMaxLength(225);

                    b.Property<DateTime>("created_date");

                    b.Property<DateTime>("dtmfecha");

                    b.Property<double>("flt_monto");

                    b.Property<double>("flt_monto_final");

                    b.Property<double>("flt_monto_inicial");

                    b.Property<double>("flt_porcentaje_comision");

                    b.Property<double>("flt_total_con_comision");

                    b.Property<string>("int_id_usuario_id");

                    b.Property<string>("int_id_usuario_trans");

                    b.Property<int?>("intidconcesion_id");

                    b.Property<string>("last_modified_by")
                        .HasMaxLength(225);

                    b.Property<DateTime>("last_modified_date");

                    b.Property<string>("str_forma_pago")
                        .HasMaxLength(50);

                    b.Property<string>("str_tipo_recarga")
                        .HasMaxLength(20);

                    b.HasKey("id");

                    b.HasIndex("int_id_usuario_id");

                    b.HasIndex("intidconcesion_id");

                    b.ToTable("tbsaldo");
                });

            modelBuilder.Entity("WebApiParquimetros.Models.Secciones", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<bool>("bit_status");

                    b.Property<int>("intidzona_id");

                    b.Property<string>("str_color");

                    b.Property<string>("str_poligono");

                    b.Property<string>("str_seccion");

                    b.HasKey("id");

                    b.HasIndex("intidzona_id");

                    b.ToTable("tbsecciones");
                });

            modelBuilder.Entity("WebApiParquimetros.Models.Tarifas", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<bool>("bool_cobro_fraccion");

                    b.Property<double>("flt_tarifa_intervalo");

                    b.Property<double>("flt_tarifa_max");

                    b.Property<double>("flt_tarifa_min");

                    b.Property<int>("int_intervalo_minutos");

                    b.Property<int>("int_tiempo_maximo");

                    b.Property<int>("int_tiempo_minimo");

                    b.Property<int>("intidconcesion_id");

                    b.HasKey("id");

                    b.HasIndex("intidconcesion_id");

                    b.ToTable("tbtarifas");
                });

            modelBuilder.Entity("WebApiParquimetros.Models.Tarjetas", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<bool>("bit_status");

                    b.Property<string>("created_by")
                        .HasMaxLength(225);

                    b.Property<DateTime>("created_date");

                    b.Property<long>("dc_mano_vigencia");

                    b.Property<long>("dcm_mes_vigencia");

                    b.Property<string>("int_id_usuario_id");

                    b.Property<int?>("intidconcesion_id");

                    b.Property<string>("last_modified_by")
                        .HasMaxLength(225);

                    b.Property<DateTime>("last_modified_date");

                    b.Property<string>("str_referencia_tarjeta")
                        .HasMaxLength(50);

                    b.Property<string>("str_sistema_tarjeta")
                        .HasMaxLength(50);

                    b.Property<string>("str_tarjeta")
                        .HasMaxLength(50);

                    b.Property<string>("str_titular")
                        .HasMaxLength(200);

                    b.HasKey("id");

                    b.HasIndex("int_id_usuario_id");

                    b.HasIndex("intidconcesion_id");

                    b.ToTable("tbtarjetas");
                });

            modelBuilder.Entity("WebApiParquimetros.Models.TiposUsuarios", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<bool>("bit_status");

                    b.Property<string>("strTipoUsuario");

                    b.HasKey("id");

                    b.ToTable("tbtiposusuarios");
                });

            modelBuilder.Entity("WebApiParquimetros.Models.UsuariosConcesiones", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<int>("int_id_concesion");

                    b.Property<string>("str_email");

                    b.Property<string>("str_pwd");

                    b.HasKey("id");

                    b.HasIndex("int_id_concesion");

                    b.ToTable("tbusersconcesiones");
                });

            modelBuilder.Entity("WebApiParquimetros.Models.Vehiculos", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<bool>("bit_status");

                    b.Property<string>("created_by")
                        .HasMaxLength(225);

                    b.Property<DateTime>("created_date");

                    b.Property<string>("int_id_usuario_id");

                    b.Property<string>("last_modified_by")
                        .HasMaxLength(255);

                    b.Property<DateTime>("last_modified_date");

                    b.Property<string>("str_color")
                        .HasMaxLength(50);

                    b.Property<string>("str_marca")
                        .HasMaxLength(20);

                    b.Property<string>("str_modelo")
                        .HasMaxLength(200);

                    b.Property<string>("str_placas")
                        .IsRequired();

                    b.HasKey("id");

                    b.ToTable("tbvehiculos");
                });

            modelBuilder.Entity("WebApiParquimetros.Models.Zonas", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<bool>("bit_status");

                    b.Property<string>("created_by")
                        .HasMaxLength(250);

                    b.Property<DateTime>("created_date");

                    b.Property<int>("int_id_ciudad_id");

                    b.Property<int>("intidconcesion_id");

                    b.Property<string>("last_modified_by")
                        .HasMaxLength(250);

                    b.Property<DateTime>("last_modified_date");

                    b.Property<string>("str_color");

                    b.Property<string>("str_descripcion")
                        .HasMaxLength(200);

                    b.Property<string>("str_latitud")
                        .HasMaxLength(50);

                    b.Property<string>("str_longitud")
                        .HasMaxLength(50);

                    b.Property<string>("str_poligono");

                    b.HasKey("id");

                    b.HasIndex("int_id_ciudad_id");

                    b.HasIndex("intidconcesion_id");

                    b.ToTable("tbzonas");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebApiParquimetros.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebApiParquimetros.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApiParquimetros.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebApiParquimetros.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApiParquimetros.Models.Agentes", b =>
                {
                    b.HasOne("WebApiParquimetros.Models.Zonas", "tbzonas")
                        .WithMany()
                        .HasForeignKey("intidzona_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApiParquimetros.Models.ApplicationUser", b =>
                {
                    b.HasOne("WebApiParquimetros.Models.TiposUsuarios", "tbtiposusuarios")
                        .WithMany()
                        .HasForeignKey("intIdTipoUsuario")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApiParquimetros.Models.Ciudades", "tbciudades")
                        .WithMany()
                        .HasForeignKey("intidciudad");

                    b.HasOne("WebApiParquimetros.Models.Concesiones", "tbconcesiones")
                        .WithMany()
                        .HasForeignKey("intidconcesion_id");

                    b.HasOne("WebApiParquimetros.Models.Zonas", "tbzonas")
                        .WithMany()
                        .HasForeignKey("intidzona");
                });

            modelBuilder.Entity("WebApiParquimetros.Models.Ciudades", b =>
                {
                    b.HasOne("WebApiParquimetros.Models.CatCiudades", "tbcatciudades")
                        .WithMany()
                        .HasForeignKey("int_id_ciudad");
                });

            modelBuilder.Entity("WebApiParquimetros.Models.Comerciantes", b =>
                {
                    b.HasOne("WebApiParquimetros.Models.Concesiones", "tbconcesiones")
                        .WithMany()
                        .HasForeignKey("intidconcesion_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApiParquimetros.Models.Comisiones", b =>
                {
                    b.HasOne("WebApiParquimetros.Models.Concesiones", "tbconcesiones")
                        .WithMany()
                        .HasForeignKey("intidconcesion_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApiParquimetros.Models.ConcesionesOpciones", b =>
                {
                    b.HasOne("WebApiParquimetros.Models.Concesiones", "tbconcesiones")
                        .WithMany()
                        .HasForeignKey("int_id_concesion");

                    b.HasOne("WebApiParquimetros.Models.CatalogoOpciones", "tbcatopciones")
                        .WithMany()
                        .HasForeignKey("int_id_opcion");
                });

            modelBuilder.Entity("WebApiParquimetros.Models.DetalleMovimientos", b =>
                {
                    b.HasOne("WebApiParquimetros.Models.ApplicationUser", "NetUsers")
                        .WithMany()
                        .HasForeignKey("int_id_usuario_id");

                    b.HasOne("WebApiParquimetros.Models.Zonas", "tbzonas")
                        .WithMany()
                        .HasForeignKey("int_id_zona");

                    b.HasOne("WebApiParquimetros.Models.Espacios", "tbespacios")
                        .WithMany()
                        .HasForeignKey("int_idespacio");

                    b.HasOne("WebApiParquimetros.Models.Movimientos", "tbmovimientos")
                        .WithMany()
                        .HasForeignKey("int_idmovimiento")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApiParquimetros.Models.DetalleSaldo", b =>
                {
                    b.HasOne("WebApiParquimetros.Models.Saldos", "tbsaldo")
                        .WithMany()
                        .HasForeignKey("int_id_saldo")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApiParquimetros.Models.ApplicationUser", "NetUsers")
                        .WithMany()
                        .HasForeignKey("int_id_usuario");
                });

            modelBuilder.Entity("WebApiParquimetros.Models.Espacios", b =>
                {
                    b.HasOne("WebApiParquimetros.Models.Zonas", "tbzonas")
                        .WithMany()
                        .HasForeignKey("id_zona")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApiParquimetros.Models.Lugares", b =>
                {
                    b.HasOne("WebApiParquimetros.Models.Zonas", "tbzonas")
                        .WithMany()
                        .HasForeignKey("int_id_zona_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApiParquimetros.Models.Concesiones", "tbconcesiones")
                        .WithMany()
                        .HasForeignKey("intidconcesion_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApiParquimetros.Models.Movimientos", b =>
                {
                    b.HasOne("WebApiParquimetros.Models.Espacios", "tbespacios")
                        .WithMany()
                        .HasForeignKey("int_id_espacio");

                    b.HasOne("WebApiParquimetros.Models.Saldos", "tbsaldo")
                        .WithMany()
                        .HasForeignKey("int_id_saldo_id");

                    b.HasOne("WebApiParquimetros.Models.Vehiculos", "tbvehiculos")
                        .WithMany()
                        .HasForeignKey("int_id_vehiculo_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApiParquimetros.Models.Concesiones", "tbconcesiones")
                        .WithMany()
                        .HasForeignKey("intidconcesion_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApiParquimetros.Models.Multas", b =>
                {
                    b.HasOne("WebApiParquimetros.Models.Movimientos", "tbmovimientos")
                        .WithMany()
                        .HasForeignKey("int_id_movimiento_id");

                    b.HasOne("WebApiParquimetros.Models.Vehiculos", "tbvehiculos")
                        .WithMany()
                        .HasForeignKey("int_id_vehiculo_id");

                    b.HasOne("WebApiParquimetros.Models.Concesiones", "tbconcesiones")
                        .WithMany()
                        .HasForeignKey("intidconcesion_id");

                    b.HasOne("WebApiParquimetros.Models.ApplicationUser", "NetUsers")
                        .WithMany()
                        .HasForeignKey("str_id_agente_id");
                });

            modelBuilder.Entity("WebApiParquimetros.Models.Parametros", b =>
                {
                    b.HasOne("WebApiParquimetros.Models.Concesiones", "tbconcesiones")
                        .WithMany()
                        .HasForeignKey("intidconcesion_id");
                });

            modelBuilder.Entity("WebApiParquimetros.Models.Permisos", b =>
                {
                    b.HasOne("WebApiParquimetros.Models.Opciones", "tbopciones")
                        .WithMany()
                        .HasForeignKey("id_opcion")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApiParquimetros.Models.TiposUsuarios", "tbtiposusuarios")
                        .WithMany()
                        .HasForeignKey("id_rol")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApiParquimetros.Models.ResumenDiario", b =>
                {
                    b.HasOne("WebApiParquimetros.Models.Concesiones", "tbconcesiones")
                        .WithMany()
                        .HasForeignKey("int_id_consecion")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApiParquimetros.Models.ResumenMensual", b =>
                {
                    b.HasOne("WebApiParquimetros.Models.Concesiones", "tbconcesiones")
                        .WithMany()
                        .HasForeignKey("int_id_consecion")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApiParquimetros.Models.ResumenSemanal", b =>
                {
                    b.HasOne("WebApiParquimetros.Models.Concesiones", "tbconcesiones")
                        .WithMany()
                        .HasForeignKey("int_id_consecion")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApiParquimetros.Models.Saldos", b =>
                {
                    b.HasOne("WebApiParquimetros.Models.ApplicationUser", "NetUsers")
                        .WithMany()
                        .HasForeignKey("int_id_usuario_id");

                    b.HasOne("WebApiParquimetros.Models.Concesiones", "tbconcesiones")
                        .WithMany()
                        .HasForeignKey("intidconcesion_id");
                });

            modelBuilder.Entity("WebApiParquimetros.Models.Secciones", b =>
                {
                    b.HasOne("WebApiParquimetros.Models.Zonas", "tbzonas")
                        .WithMany()
                        .HasForeignKey("intidzona_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApiParquimetros.Models.Tarifas", b =>
                {
                    b.HasOne("WebApiParquimetros.Models.Concesiones", "tbconcesiones")
                        .WithMany()
                        .HasForeignKey("intidconcesion_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApiParquimetros.Models.Tarjetas", b =>
                {
                    b.HasOne("WebApiParquimetros.Models.ApplicationUser", "NetUsers")
                        .WithMany()
                        .HasForeignKey("int_id_usuario_id");

                    b.HasOne("WebApiParquimetros.Models.Concesiones", "tbconcesiones")
                        .WithMany()
                        .HasForeignKey("intidconcesion_id");
                });

            modelBuilder.Entity("WebApiParquimetros.Models.UsuariosConcesiones", b =>
                {
                    b.HasOne("WebApiParquimetros.Models.Concesiones", "tbconcesiones")
                        .WithMany()
                        .HasForeignKey("int_id_concesion")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApiParquimetros.Models.Zonas", b =>
                {
                    b.HasOne("WebApiParquimetros.Models.Ciudades", "tbciudades")
                        .WithMany()
                        .HasForeignKey("int_id_ciudad_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApiParquimetros.Models.Concesiones", "tbconcesiones")
                        .WithMany()
                        .HasForeignKey("intidconcesion_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
